steps:
  - simple_align:
      cases: true
      top_level_patterns: true
      records: true

  # Import cleanup
  - imports:
      align: none
      list_align: after_alias
      pad_module_names: false
      long_list_align: inline
      empty_list_align: inherit
      list_padding: 4
      separate_lists: true
      space_surround: false

  - language_pragmas:
      style: vertical
      remove_redundant: true

  # Remove trailing whitespace
  - trailing_whitespace: {}

columns: 100

newline: native

language_extensions:
  # GHC2021
  - BangPatterns
  - BinaryLiterals
  - ConstrainedClassMethods
  - ConstraintKinds
  - DeriveDataTypeable
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveLift
  - DeriveTraversable
  - DoAndIfThenElse
  - EmptyCase
  - EmptyDataDecls
  - EmptyDataDeriving
  - ExistentialQuantification
  - ExplicitForAll
  - FieldSelectors
  - FlexibleContexts
  - FlexibleInstances
  - ForeignFunctionInterface
  - GADTSyntax
  - GeneralisedNewtypeDeriving
  - HexFloatLiterals
  - ImplicitPrelude
  - ImportQualifiedPost
  - InstanceSigs
  - KindSignatures
  - MonomorphismRestriction
  - MultiParamTypeClasses
  - NamedFieldPuns
  - NamedWildCards
  - NumericUnderscores
  - PatternGuards
  - PolyKinds
  - PostfixOperators
  - RankNTypes
  - RelaxedPolyRec
  - ScopedTypeVariables
  - StandaloneDeriving
  - StandaloneKindSignatures
  - StarIsType
  - TraditionalRecordSyntax
  - TupleSections
  - TypeApplications
  - TypeOperators
  - TypeSynonymInstances
  # specified in default-extensions in cabal, above and beyond GHC2021
  - DeriveGeneric
  - FunctionalDependencies
  - LambdaCase
  - OverloadedStrings
  - StrictData
  - TupleSections
  # referenced via LANGUAGE pragma in code
  - TemplateHaskell
  - RecordWildCards
  - DeriveAnyClass
